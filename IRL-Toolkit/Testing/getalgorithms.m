% Get standard list of algorithms to test.
function [algorithms,algorithm_params,names,colors,order] = ...
    getalgorithms(use_dtc,use_ftc,use_dtree,use_learch,use_mmp,use_me,use_cont)

algorithms = {'dmpl',...
%               'gpirl',...
              'gpirl',...
%               'maxent',...
              'maxent',...
%               'maxent',...
              'mwal',...
%               'an',...
              'mmp',...
%               'mmpboost',...
%               'learch',...
              'learch',...
%               'firl'
              };
names = {'DMPL',...
%          'GPIRL (all states)',...
         'GPIRL',...
%          'MaxEnt True',...
         'MaxEnt',...
%          'MaxEnt Laplace',...
         'MWAL',...
%          'Abbeel & Ng',...
         'MMP',...
%          'MMPBoost',...
%          'LEARCH',...
         'LEARCH',...
%          'FIRL'
         };
algorithm_params = {...
    struct(),...
%     struct('inducing_pts','examplesplus'),...
    struct('inducing_pts','all'),...
%     struct('all_features',0,'true_features',1),...
    struct('all_features',1,'laplace_prior',1),...
%     struct('all_features',1,'laplace_prior',1),...
    struct('all_features',1),...
%     struct('all_features',1),...
    struct('all_features',1),...
%     struct(),...
%     struct(),...
    struct('function','linear,dtree'),...
%     struct()
    };
colors = {...
    [0.0,0.0,0.0],...
    [0.0,0.0,0.5],...
    [1.0,0.5,0.5],...
    [0.9,0.1,0.1],...
    [0.6,0.0,0.0],...
    [0.0,1.0,0.0],...
    [0.7,0.5,0.1],...
    [0.0,0.5,0.0],...
    [0.2,0.9,0.9],...
    [0.6,0.9,0.4],...
    [0.5,0.6,0.2],...
    [0.4,0.6,0.9]};

% Set continuous parameters.
if use_cont,
    algorithm_params{1}.warp_x = 1;
    algorithm_params{2}.warp_x = 1;
    algorithm_params{11}.function = 'linear,logistic';
end;

% Create order.
order = 1:length(colors);
